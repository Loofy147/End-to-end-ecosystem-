import React, { useState, useEffect } from 'react';

// Generated based on: "Landing page of pizzahot"
interface Props {
  data: any[];
  onUpdate: (data: any) => void;
}

export const GeneratedComponent: React.FC<Props> = ({ data, onUpdate }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [items, setItems] = useState(data);

  useEffect(() => {
    // Initialize with provided data
    if (data && data.length > 0) {
      setItems(data);
    }
  }, [data]);

  const handleProcess = async () => {
    setIsLoading(true);
    try {
      // Process logic would go here
      const result = await Promise.resolve([...items, { id: items.length + 1 }]);
      setItems(result);
      onUpdate(result);
    } catch (error) {
      console.error("Error processing data:", error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="p-4 border rounded-lg shadow-sm">
      <h2 className="text-xl font-bold mb-4">Generated Component</h2>
      <div className="space-y-4">
        {items.map((item) => (
          <div key={item.id} className="p-2 bg-gray-50 rounded">
            Item {item.id}
          </div>
        ))}
      </div>
      <button 
        className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
        onClick={handleProcess}
        disabled={isLoading}
      >
        {isLoading ? 'Processing...' : 'Process Data'}
      </button>
    </div>
  );
};