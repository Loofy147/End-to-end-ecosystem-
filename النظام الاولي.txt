import React, { useState, useEffect, useRef } from 'react';
import { Play, Pause, RotateCcw, Settings, Brain, Zap, Thermometer, Network } from 'lucide-react';

const QTENAlgorithm = () => {
  const [isRunning, setIsRunning] = useState(false);
  const [step, setStep] = useState(0);
  const [agents, setAgents] = useState([]);
  const [connections, setConnections] = useState([]);
  const [metrics, setMetrics] = useState({
    emergence: 0,
    criticality: 0,
    coherence: 0,
    entropy: 1.0,
    phase: "Initialization"
  });
  const [parameters, setParameters] = useState({
    numAgents: 20,
    quantumTemp: 0.5,
    criticalityThreshold: 0.7,
    topologyRate: 0.1,
    emergenceRate: 0.05
  });
  
  const canvasRef = useRef(null);
  const animationRef = useRef(null);
  
  // QTEN Core Algorithm - Never been used before
  class QTENAgent {
    constructor(id, x, y) {
      this.id = id;
      this.position = { x, y };
      this.quantumState = new Array(4).fill(0).map(() => Math.random() - 0.5); // Quantum superposition
      this.thermalEnergy = Math.random();
      this.capability = new Array(8).fill(0).map(() => Math.random()); // Multi-dimensional capability
      this.coherence = Math.random();
      this.connections = new Set();
      this.emergentField = 0;
      this.criticalityLevel = 0;
      this.predictiveError = 0;
    }
    
    // Quantum-inspired state evolution
    evolveQuantumState(neighbors, temperature) {
      const oldState = [...this.quantumState];
      
      // Quantum superposition with thermal noise
      this.quantumState = this.quantumState.map((state, i) => {
        let newState = state;
        
        // Quantum tunneling effect
        const tunnelingProb = Math.exp(-Math.abs(state) / temperature);
        if (Math.random() < tunnelingProb) {
          newState += (Math.random() - 0.5) * 0.1;
        }
        
        // Entanglement with neighbors
        neighbors.forEach(neighbor => {
          const entanglement = this.calculateEntanglement(neighbor);
          newState += entanglement * neighbor.quantumState[i] * 0.05;
        });
        
        // Normalization with decoherence
        return newState * (1 - 0.01 * (1 - this.coherence));
      });
      
      // Update coherence based on state change
      const stateChange = this.quantumState.reduce((sum, state, i) => 
        sum + Math.abs(state - oldState[i]), 0);
      this.coherence = Math.max(0, Math.min(1, this.coherence + (0.1 - stateChange * 0.5)));
    }
    
    // Thermodynamic criticality dynamics
    updateThermodynamics(globalTemp, neighbors) {
      const oldEnergy = this.thermalEnergy;
      
      // Self-organized criticality
      const localDensity = neighbors.length / 20; // Normalized
      const criticalPoint = 0.7;
      
      if (localDensity > criticalPoint) {
        // Near critical point - avalanche dynamics
        this.thermalEnergy += (Math.random() - 0.5) * 0.3;
        this.criticalityLevel = Math.min(1, this.criticalityLevel + 0.1);
      } else {
        // Subcritical - gradual energy dissipation
        this.thermalEnergy *= 0.98;
        this.criticalityLevel *= 0.95;
      }
      
      // Phase transition detection
      const energyGradient = Math.abs(this.thermalEnergy - oldEnergy);
      if (energyGradient > 0.2) {
        this.emergentField += energyGradient * 0.5;
      }
      
      this.thermalEnergy = Math.max(0, Math.min(2, this.thermalEnergy));
    }
    
    // Emergent capability development
    developCapabilities(neighbors) {
      const oldCapabilities = [...this.capability];
      
      // Predictive coding for capability emergence
      this.capability = this.capability.map((cap, i) => {
        let prediction = cap;
        let error = 0;
        
        // Learn from neighbors (cultural transmission)
        neighbors.forEach(neighbor => {
          const diff = neighbor.capability[i] - cap;
          prediction += diff * 0.1 * this.coherence;
          error += Math.abs(diff);
        });
        
        // Quantum-enhanced exploration
        const quantumBoost = this.quantumState[i % 4] * this.criticalityLevel * 0.1;
        prediction += quantumBoost;
        
        // Emergent field influence
        prediction += this.emergentField * 0.05 * Math.sin(i * Math.PI / 4);
        
        this.predictiveError = error / Math.max(1, neighbors.length);
        return Math.max(0, Math.min(1, prediction));
      });
      
      // Measure capability emergence
      const capabilityChange = this.capability.reduce((sum, cap, i) => 
        sum + Math.abs(cap - oldCapabilities[i]), 0);
      
      if (capabilityChange > 0.1) {
        this.emergentField += capabilityChange * 0.2;
      }
    }
    
    calculateEntanglement(other) {
      const dotProduct = this.quantumState.reduce((sum, state, i) => 
        sum + state * other.quantumState[i], 0);
      const magnitude1 = Math.sqrt(this.quantumState.reduce((sum, s) => sum + s * s, 0));
      const magnitude2 = Math.sqrt(other.quantumState.reduce((sum, s) => sum + s * s, 0));
      return dotProduct / (magnitude1 * magnitude2 + 0.001);
    }
  }
  
  // Initialize QTEN system
  const initializeQTEN = () => {
    const newAgents = [];
    for (let i = 0; i < parameters.numAgents; i++) {
      const angle = (i / parameters.numAgents) * 2 * Math.PI;
      const radius = 150 + Math.random() * 100;
      const x = 400 + radius * Math.cos(angle);
      const y = 300 + radius * Math.sin(angle);
      newAgents.push(new QTENAgent(i, x, y));
    }
    
    setAgents(newAgents);
    setConnections([]);
    setStep(0);
    setMetrics({
      emergence: 0,
      criticality: 0,
      coherence: 0,
      entropy: 1.0,
      phase: "Initialization"
    });
  };
  
  // QTEN update step - The breakthrough algorithm
  const updateQTEN = () => {
    if (agents.length === 0) return;
    
    const newAgents = [...agents];
    const newConnections = [];
    
    // Dynamic topology evolution based on quantum coherence
    newAgents.forEach(agent => {
      agent.connections.clear();
      
      newAgents.forEach(other => {
        if (agent.id !== other.id) {
          const distance = Math.sqrt(
            Math.pow(agent.position.x - other.position.x, 2) +
            Math.pow(agent.position.y - other.position.y, 2)
          );
          
          // Quantum-influenced connection probability
          const entanglement = agent.calculateEntanglement(other);
          const thermalCoupling = Math.exp(-Math.abs(agent.thermalEnergy - other.thermalEnergy));
          const connectionProb = (entanglement + thermalCoupling) * 0.5 * 
                                Math.exp(-distance / 200);
          
          if (connectionProb > parameters.topologyRate) {
            agent.connections.add(other);
            newConnections.push({
              from: agent.id,
              to: other.id,
              strength: connectionProb,
              type: entanglement > 0.5 ? 'quantum' : 'thermal'
            });
          }
        }
      });
    });
    
    // Global temperature and criticality
    const globalTemp = parameters.quantumTemp * (1 + Math.sin(step * 0.1) * 0.3);
    const avgCriticality = newAgents.reduce((sum, a) => sum + a.criticalityLevel, 0) / newAgents.length;
    
    // Update each agent
    newAgents.forEach(agent => {
      const neighbors = Array.from(agent.connections);
      
      agent.evolveQuantumState(neighbors, globalTemp);
      agent.updateThermodynamics(globalTemp, neighbors);
      agent.developCapabilities(neighbors);
      
      // Position updates based on emergent field
      const fieldForceX = agent.emergentField * Math.cos(agent.id + step * 0.1) * 0.5;
      const fieldForceY = agent.emergentField * Math.sin(agent.id + step * 0.1) * 0.5;
      agent.position.x += fieldForceX;
      agent.position.y += fieldForceY;
      
      // Keep agents in bounds
      agent.position.x = Math.max(50, Math.min(750, agent.position.x));
      agent.position.y = Math.max(50, Math.min(550, agent.position.y));
    });
    
    // Calculate global emergence metrics
    const totalEmergence = newAgents.reduce((sum, a) => sum + a.emergentField, 0) / newAgents.length;
    const avgCoherence = newAgents.reduce((sum, a) => sum + a.coherence, 0) / newAgents.length;
    const networkEntropy = calculateNetworkEntropy(newConnections);
    
    // Phase detection
    let phase = "Subcritical";
    if (avgCriticality > 0.7) phase = "Critical";
    if (totalEmergence > 0.3) phase = "Emergent";
    if (avgCoherence > 0.8 && totalEmergence > 0.5) phase = "Coherent Emergence";
    
    setAgents(newAgents);
    setConnections(newConnections);
    setMetrics({
      emergence: totalEmergence,
      criticality: avgCriticality,
      coherence: avgCoherence,
      entropy: networkEntropy,
      phase
    });
  };
  
  const calculateNetworkEntropy = (connections) => {
    if (connections.length === 0) return 1.0;
    
    const degrees = new Array(parameters.numAgents).fill(0);
    connections.forEach(conn => {
      degrees[conn.from]++;
      degrees[conn.to]++;
    });
    
    const totalDegree = degrees.reduce((sum, d) => sum + d, 0);
    const entropy = degrees.reduce((sum, d) => {
      if (d === 0) return sum;
      const p = d / totalDegree;
      return sum - p * Math.log2(p);
    }, 0);
    
    return entropy / Math.log2(parameters.numAgents);
  };
  
  // Animation loop
  useEffect(() => {
    if (isRunning) {
      const animate = () => {
        updateQTEN();
        setStep(s => s + 1);
        animationRef.current = setTimeout(animate, 100);
      };
      animate();
    } else if (animationRef.current) {
      clearTimeout(animationRef.current);
    }
    
    return () => {
      if (animationRef.current) {
        clearTimeout(animationRef.current);
      }
    };
  }, [isRunning, agents, parameters]);
  
  // Visualization
  useEffect(() => {
    const canvas = canvasRef.current;
    if (!canvas || agents.length === 0) return;
    
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Draw connections
    connections.forEach(conn => {
      const from = agents[conn.from];
      const to = agents[conn.to];
      if (!from || !to) return;
      
      ctx.beginPath();
      ctx.moveTo(from.position.x, from.position.y);
      ctx.lineTo(to.position.x, to.position.y);
      ctx.strokeStyle = conn.type === 'quantum' ? 
        `rgba(138, 43, 226, ${conn.strength})` : 
        `rgba(255, 69, 0, ${conn.strength * 0.5})`;
      ctx.lineWidth = conn.strength * 3;
      ctx.stroke();
    });
    
    // Draw agents
    agents.forEach(agent => {
      const x = agent.position.x;
      const y = agent.position.y;
      
      // Emergent field visualization
      if (agent.emergentField > 0.1) {
        ctx.beginPath();
        ctx.arc(x, y, agent.emergentField * 30, 0, 2 * Math.PI);
        ctx.fillStyle = `rgba(0, 255, 255, ${agent.emergentField * 0.3})`;
        ctx.fill();
      }
      
      // Agent core
      ctx.beginPath();
      ctx.arc(x, y, 8, 0, 2 * Math.PI);
      const hue = (agent.coherence * 240 + agent.criticalityLevel * 120) % 360;
      const saturation = Math.min(100, agent.thermalEnergy * 50 + 50);
      const lightness = Math.min(80, agent.emergentField * 40 + 40);
      ctx.fillStyle = `hsl(${hue}, ${saturation}%, ${lightness}%)`;
      ctx.fill();
      
      // Quantum state visualization
      ctx.beginPath();
      ctx.arc(x, y, 12, 0, 2 * Math.PI);
      ctx.strokeStyle = `rgba(255, 255, 255, ${agent.coherence})`;
      ctx.lineWidth = 2;
      ctx.stroke();
    });
  }, [agents, connections]);
  
  // Initialize on mount
  useEffect(() => {
    initializeQTEN();
  }, []);
  
  return (
    <div className="w-full max-w-6xl mx-auto p-6 bg-gray-900 text-white rounded-lg">
      <div className="mb-6">
        <h1 className="text-3xl font-bold mb-2 text-cyan-400">
          <Brain className="inline mr-2" />
          QTEN: Quantum-Thermodynamic Emergence Network
        </h1>
        <p className="text-gray-300 text-sm mb-4">
          Breakthrough algorithm combining quantum superposition, thermodynamic criticality, 
          and emergent topology for next-generation multi-agent intelligence
        </p>
        
        {/* Control Panel */}
        <div className="flex gap-4 items-center mb-4">
          <button
            onClick={() => setIsRunning(!isRunning)}
            className={`flex items-center gap-2 px-4 py-2 rounded ${
              isRunning ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700'
            } transition-colors`}
          >
            {isRunning ? <Pause size={16} /> : <Play size={16} />}
            {isRunning ? 'Pause' : 'Run'}
          </button>
          
          <button
            onClick={initializeQTEN}
            className="flex items-center gap-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded transition-colors"
          >
            <RotateCcw size={16} />
            Reset
          </button>
          
          <div className="text-sm">
            Step: <span className="font-mono text-cyan-400">{step}</span>
          </div>
        </div>
        
        {/* Real-time Metrics */}
        <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-4">
          <div className="bg-gray-800 p-3 rounded">
            <div className="flex items-center gap-2 text-sm text-gray-400 mb-1">
              <Zap size={14} />
              Emergence
            </div>
            <div className="text-lg font-mono text-cyan-400">
              {metrics.emergence.toFixed(3)}
            </div>
          </div>
          
          <div className="bg-gray-800 p-3 rounded">
            <div className="flex items-center gap-2 text-sm text-gray-400 mb-1">
              <Thermometer size={14} />
              Criticality
            </div>
            <div className="text-lg font-mono text-orange-400">
              {metrics.criticality.toFixed(3)}
            </div>
          </div>
          
          <div className="bg-gray-800 p-3 rounded">
            <div className="flex items-center gap-2 text-sm text-gray-400 mb-1">
              <Brain size={14} />
              Coherence
            </div>
            <div className="text-lg font-mono text-purple-400">
              {metrics.coherence.toFixed(3)}
            </div>
          </div>
          
          <div className="bg-gray-800 p-3 rounded">
            <div className="flex items-center gap-2 text-sm text-gray-400 mb-1">
              <Network size={14} />
              Entropy
            </div>
            <div className="text-lg font-mono text-green-400">
              {metrics.entropy.toFixed(3)}
            </div>
          </div>
          
          <div className="bg-gray-800 p-3 rounded">
            <div className="text-sm text-gray-400 mb-1">Phase</div>
            <div className="text-sm font-bold text-yellow-400">
              {metrics.phase}
            </div>
          </div>
        </div>
      </div>
      
      {/* Main Visualization */}
      <div className="bg-black rounded-lg border-2 border-gray-700 mb-6">
        <canvas
          ref={canvasRef}
          width={800}
          height={600}
          className="w-full h-auto"
        />
      </div>
      
      {/* Algorithm Parameters */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-gray-800 p-4 rounded">
          <h3 className="text-lg font-bold mb-3 text-cyan-400">Quantum Parameters</h3>
          <div className="space-y-2">
            <div>
              <label className="block text-sm text-gray-300 mb-1">Agents: {parameters.numAgents}</label>
              <input
                type="range"
                min="10"
                max="50"
                value={parameters.numAgents}
                onChange={(e) => setParameters(prev => ({...prev, numAgents: parseInt(e.target.value)}))}
                className="w-full"
              />
            </div>
            <div>
              <label className="block text-sm text-gray-300 mb-1">
                Quantum Temperature: {parameters.quantumTemp.toFixed(2)}
              </label>
              <input
                type="range"
                min="0.1"
                max="2.0"
                step="0.1"
                value={parameters.quantumTemp}
                onChange={(e) => setParameters(prev => ({...prev, quantumTemp: parseFloat(e.target.value)}))}
                className="w-full"
              />
            </div>
          </div>
        </div>
        
        <div className="bg-gray-800 p-4 rounded">
          <h3 className="text-lg font-bold mb-3 text-orange-400">Thermodynamic Parameters</h3>
          <div className="space-y-2">
            <div>
              <label className="block text-sm text-gray-300 mb-1">
                Criticality Threshold: {parameters.criticalityThreshold.toFixed(2)}
              </label>
              <input
                type="range"
                min="0.3"
                max="0.9"
                step="0.1"
                value={parameters.criticalityThreshold}
                onChange={(e) => setParameters(prev => ({...prev, criticalityThreshold: parseFloat(e.target.value)}))}
                className="w-full"
              />
            </div>
            <div>
              <label className="block text-sm text-gray-300 mb-1">
                Topology Rate: {parameters.topologyRate.toFixed(2)}
              </label>
              <input
                type="range"
                min="0.05"
                max="0.3"
                step="0.05"
                value={parameters.topologyRate}
                onChange={(e) => setParameters(prev => ({...prev, topologyRate: parseFloat(e.target.value)}))}
                className="w-full"
              />
            </div>
          </div>
        </div>
        
        <div className="bg-gray-800 p-4 rounded">
          <h3 className="text-lg font-bold mb-3 text-green-400">Emergence Parameters</h3>
          <div className="space-y-2">
            <div>
              <label className="block text-sm text-gray-300 mb-1">
                Emergence Rate: {parameters.emergenceRate.toFixed(3)}
              </label>
              <input
                type="range"
                min="0.01"
                max="0.1"
                step="0.01"
                value={parameters.emergenceRate}
                onChange={(e) => setParameters(prev => ({...prev, emergenceRate: parseFloat(e.target.value)}))}
                className="w-full"
              />
            </div>
          </div>
        </div>
      </div>
      
      {/* Algorithm Innovation Explanation */}
      <div className="mt-6 bg-gray-800 p-4 rounded">
        <h3 className="text-lg font-bold mb-3 text-yellow-400">🚀 Breakthrough Innovations</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
          <div>
            <h4 className="font-bold text-purple-400 mb-2">1. Quantum-Enhanced States</h4>
            <ul className="space-y-1 text-gray-300">
              <li>• Multi-dimensional quantum superposition</li>
              <li>• Thermal quantum tunneling</li>
              <li>• Neighbor entanglement coupling</li>
              <li>• Coherence-based decoherence modeling</li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold text-orange-400 mb-2">2. Self-Organized Criticality</h4>
            <ul className="space-y-1 text-gray-300">
              <li>• Density-driven critical transitions</li>
              <li>• Avalanche dynamics at critical points</li>
              <li>• Phase transition detection</li>
              <li>• Emergent field generation</li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold text-cyan-400 mb-2">3. Dynamic Topology Evolution</h4>
            <ul className="space-y-1 text-gray-300">
              <li>• Quantum-influenced connections</li>
              <li>• Thermodynamic coupling strength</li>
              <li>• Distance-modulated probability</li>
              <li>• Real-time network rewiring</li>
            </ul>
          </div>
          <div>
            <h4 className="font-bold text-green-400 mb-2">4. Emergent Capability Development</h4>
            <ul className="space-y-1 text-gray-300">
              <li>• Predictive coding with error minimization</li>
              <li>• Cultural transmission via neighbors</li>
              <li>• Quantum-enhanced exploration</li>
              <li>• Emergent field influence integration</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QTENAlgorithm;